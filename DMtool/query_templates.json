[
  {
    "id": "simple_filter_transformation",
    "prompt": "Bring {field} with {filter_field} = {filter_value} from {table} Table",
    "query": "INSERT INTO {target_table} ({target_field}) SELECT {field} FROM {table} WHERE {filter_field} = '{filter_value}'",
    "plan": [
      "1. Identify the source table {table}",
      "2. Identify the target field {field} to select",
      "3. Identify the filter condition {filter_field} = {filter_value}",
      "4. Determine if INSERT or UPDATE operation is needed based on target data",
      "5. For INSERT: Prepare INSERT query to add the filtered data",
      "6. For UPDATE: Prepare UPDATE query with subquery to update the target table",
      "7. Execute the operation to update the target table"
    ]
  },
  {
    "id": "multi_table_conditional",
    "prompt": "Check {field1} in {table1} and IF matching entries found, bring {field2} from {table1} ELSE check in {table2} and bring {field2} ELSE bring from {table3}",
    "query": "UPDATE {target_table} SET {target_field} = CASE WHEN EXISTS (SELECT 1 FROM {table1} WHERE {key_field} = {target_table}.{key_field}) THEN (SELECT {field2} FROM {table1} WHERE {key_field} = {target_table}.{key_field}) WHEN EXISTS (SELECT 1 FROM {table2} WHERE {key_field} = {target_table}.{key_field}) THEN (SELECT {field2} FROM {table2} WHERE {key_field} = {target_table}.{key_field}) ELSE (SELECT {field2} FROM {table3} WHERE {key_field} = {target_table}.{key_field}) END",
    "plan": [
      "1. Identify the key field {field1} to check across tables",
      "2. Identify the field {field2} to retrieve",
      "3. Identify the three tables to check in sequence",
      "4. Create a CASE expression with EXISTS checks to implement the conditional logic",
      "5. Prepare an UPDATE statement to update the target field"
    ]
  },
  {
    "id": "conditional_value_assignment",
    "prompt": "If {field1} in ({values1}) then '{result1}' ELSE IF {field1} in ({values2}) then '{result2}' ELSE '{default_result}'",
    "query": "UPDATE {target_table} SET {target_field} = CASE WHEN {field1} IN ({values1}) THEN '{result1}' WHEN {field1} IN ({values2}) THEN '{result2}' WHEN {field1} IN ({values3}) THEN '{result3}' ELSE '{default_result}' END",
    "plan": [
      "1. Identify the field {field1} to check",
      "2. Identify the sets of values to check against",
      "3. Identify the result values for each condition",
      "4. Create a CASE expression with multiple conditions",
      "5. Prepare the UPDATE statement to set the target field"
    ]
  },
  {
    "id": "complex_nested_conditional",
    "prompt": "For materials with {condition1}, check {field1} in {table1}. If {field1} in ({values1}) then '{result1}', else check {field1} in {table2}. If {field1} in ({values2}) then '{result2}', else '{result3}'. For materials not matching {condition1}, set to '{default_result}'",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_field} TEXT; UPDATE {target_table} SET {new_field} = CASE WHEN {condition1} THEN (CASE WHEN (SELECT {field1} FROM {table1} WHERE {key_field} = {target_table}.{key_field}) IN ({values1}) THEN '{result1}' WHEN (SELECT {field1} FROM {table2} WHERE {key_field} = {target_table}.{key_field}) IN ({values2}) THEN '{result2}' ELSE '{result3}' END) ELSE '{default_result}' END",
    "plan": [
      "1. Add new column to store the result",
      "2. Identify the primary condition to check material types",
      "3. For matching materials, implement nested conditional logic",
      "4. Check field values in first table against first set of values",
      "5. If not found, check field values in second table against second set",
      "6. Apply default values for non-matching conditions",
      "7. Update the target table with the computed values"
    ]
  },
  {
    "id": "join_segment_data",
    "prompt": "Join {field1} from {segment1} with {field2} from {segment2} and Bring {field3} for conditions",
    "query": "INSERT INTO {target_table} ({target_fields}) SELECT t1.{field1}, t2.{field3} FROM {segment1_table} t1 JOIN {segment2_table} t2 ON t1.{field1} = t2.{field2} WHERE t2.{filter_field} IN ({filter_values})",
    "plan": [
      "1. Identify the segment tables to join",
      "2. Identify the join fields between segments",
      "3. Identify additional filter conditions",
      "4. Prepare a JOIN query between the segment tables",
      "5. Apply appropriate filters",
      "6. Determine if INSERT or UPDATE operation is needed based on target data",
      "7. Execute the operation to update the target table"
    ]
  },
  {
    "id": "multi_table_join_with_lookup",
    "prompt": "Join {entity1} from {table1} with {entity2} from {table2}, then use {lookup_field} from {table2} to get {result_fields} from {table3}",
    "query": "UPDATE {target_table} SET {target_fields} = (SELECT {result_fields} FROM {table1} t1 JOIN {table2} t2 ON t1.{entity1} = t2.{entity2} JOIN {table3} t3 ON t2.{lookup_field} = t3.{lookup_field} WHERE t1.{key_field} = {target_table}.{key_field})",
    "plan": [
      "1. Identify the primary entities to join between first two tables",
      "2. Identify the lookup field to connect to the third table",
      "3. Identify the result fields to retrieve from the third table",
      "4. Create a three-table JOIN query",
      "5. Update the target table with the joined data"
    ]
  },
  {
    "id": "region_based_conditional",
    "prompt": "If {country_field} is European country then '{european_value}', if Asian country then '{asian_value}', else '{other_value}'",
    "query": "UPDATE {target_table} SET {target_field} = CASE WHEN {country_field} IN ('DE', 'FR', 'IT', 'ES', 'NL', 'BE', 'AT', 'CH', 'SE', 'NO', 'DK', 'FI', 'IE', 'PT', 'GR', 'PL', 'CZ', 'SK', 'HU', 'SI', 'HR', 'BG', 'RO', 'EE', 'LV', 'LT', 'LU', 'MT', 'CY') THEN '{european_value}' WHEN {country_field} IN ('CN', 'JP', 'KR', 'IN', 'TH', 'SG', 'MY', 'ID', 'PH', 'VN', 'TW', 'HK', 'MO') THEN '{asian_value}' ELSE '{other_value}' END",
    "plan": [
      "1. Identify the country field to check",
      "2. Define European country codes list",
      "3. Define Asian country codes list", 
      "4. Create CASE expression with regional conditions",
      "5. Update target field with appropriate regional values"
    ]
  },
  {
    "id": "date_extraction",
    "prompt": "Add a new column named {new_column} to the target table and extract {date_part} from {date_field}",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = substr({date_field}, {start_pos}, {length})",
    "plan": [
      "1. Identify the target table to modify",
      "2. Identify the new column name to add",
      "3. Identify the source field to extract data from",
      "4. Determine the extraction logic based on the part to extract",
      "5. Add the new column to the target table",
      "6. Update the new column with the extracted data"
    ]
  },
  {
    "id": "date_formatting",
    "prompt": "Add a new column for {date_type} from the {date_field}",
    "query": "ALTER TABLE {target_table} ADD COLUMN {target_field} TEXT; UPDATE {target_table} SET {target_field} = CASE WHEN '{date_type}' = 'day' THEN substr({date_field}, 7, 2) WHEN '{date_type}' = 'month' THEN substr({date_field}, 5, 2) WHEN '{date_type}' = 'year' THEN substr({date_field}, 1, 4) WHEN '{date_type}' = 'quarter' THEN CASE WHEN CAST(substr({date_field}, 5, 2) AS INTEGER) BETWEEN 1 AND 3 THEN 'Q1' WHEN CAST(substr({date_field}, 5, 2) AS INTEGER) BETWEEN 4 AND 6 THEN 'Q2' WHEN CAST(substr({date_field}, 5, 2) AS INTEGER) BETWEEN 7 AND 9 THEN 'Q3' ELSE 'Q4' END WHEN '{date_type}' = 'day_name' THEN CASE strftime('%w', substr({date_field}, 1, 4) || '-' || substr({date_field}, 5, 2) || '-' || substr({date_field}, 7, 2)) WHEN '0' THEN 'Sunday' WHEN '1' THEN 'Monday' WHEN '2' THEN 'Tuesday' WHEN '3' THEN 'Wednesday' WHEN '4' THEN 'Thursday' WHEN '5' THEN 'Friday' WHEN '6' THEN 'Saturday' END END",
    "plan": [
      "1. Identify the date field to format",
      "2. Identify the type of date information to extract (day, month, year, quarter, day_name)",
      "3. Add a new column to store the extracted information",
      "4. Create appropriate SQLite date extraction expressions",
      "5. Update the new column with the formatted date information"
    ]
  },
  {
    "id": "date_calculation",
    "prompt": "Add a new column for {calculation_type} based on {date_field}",
    "query": "ALTER TABLE {target_table} ADD COLUMN {target_field} TEXT; UPDATE {target_table} SET {target_field} = CASE WHEN '{calculation_type}' = 'last_month_end' THEN substr({date_field}, 1, 4) || '-' || substr({date_field}, 5, 2) || '-01', '-1 day') WHEN '{calculation_type}' = 'system_date' THEN date('now') END",
    "plan": [
      "1. Identify the calculation type (last_month_end, system_date, etc.)",
      "2. Add a new column to store the calculated date",
      "3. Implement the appropriate date calculation logic",
      "4. Update the new column with the calculated values"
    ]
  },
  {
    "id": "get_current_date",
    "prompt": "Add a new column with system date",
    "query": "ALTER TABLE {target_table} ADD COLUMN {target_field} TEXT; UPDATE {target_table} SET {target_field} = date('now')",
    "plan": [
      "1. Identify the target table",
      "2. Add a new column to store the system date",
      "3. Update the column with the current date using SQLite's date function"
    ]
  },
  {
    "id": "clean_special_characters",
    "prompt": "Remove special characters from {field}",
    "query": "UPDATE {target_table} SET {field} = regexp_replace({field}, '[/[^a-zA-Z0-9 ]/g]', '', 'i')",
    "plan": [
      "1. Identify the field to clean",
      "2. Use regular expressions to remove special characters",
      "3. Update the field with the cleaned text"
    ]
  },
  {
    "id": "complex_string_manipulation",
    "prompt": "If {field} has one word use as-is in {target_field}, else skip first word and take first {length} characters from remaining words",
    "query": "UPDATE {target_table} SET {target_field} = CASE WHEN length({field}) - length(replace({field}, ' ', '')) = 0 THEN {field} ELSE substr(substr({field}, instr({field}, ' ') + 1), 1, {length}) END",
    "plan": [
      "1. Identify the source field to manipulate",
      "2. Check if the field contains only one word (no spaces)",
      "3. If one word, use the entire word",
      "4. If multiple words, skip the first word and extract specified length from remaining",
      "5. Update the target field with the processed text"
    ]
  },
  {
    "id": "lookup_table_mapping",
    "prompt": "From {lookup_table} take {result_field} corresponding to {key_field} and put into {target_field}",
    "query": "UPDATE {target_table} SET {target_field} = (SELECT {result_field} FROM {lookup_table} WHERE {key_field} = {target_table}.{source_field})",
    "plan": [
      "1. Identify the lookup table and mapping fields",
      "2. Identify the key field to match on",
      "3. Identify the result field to retrieve",
      "4. Create UPDATE with subquery to perform the lookup",
      "5. Update target field with mapped values"
    ]
  },
  {
    "id": "delete_column",
    "prompt": "Delete column {column} from the target table",
    "query": "Alter Table {target_table} Drop Column {column};",
    "plan": [
      "1. Identify the target table to modify",
      "2. Identify the column to delete",
      "3. Drop the specified column from the target table"
    ]  
  },
  {
    "id": "conditional_update",
    "prompt": "If the value of {field} starts with '{prefix}', then set {field} to '{new_value}'",
    "query": "UPDATE {target_table} SET {field} = '{new_value}' WHERE {field} LIKE '{prefix}%'",
    "plan": [
      "1. Identify the field to check and update",
      "2. Identify the prefix to check for",
      "3. Identify the new value to set",
      "4. Create an UPDATE statement with a LIKE condition"
    ]
  },
  {
    "id": "string_length_calculation",
    "prompt": "Calculate the length of {field1} and put it in {field2} and add a new column {new_column} if length > {threshold} set '{value1}' else '{value2}'",
    "query": "UPDATE {target_table} SET {field2} = length({field1}); ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = CASE WHEN length({field1}) > {threshold} THEN '{value1}' ELSE '{value2}' END",
    "plan": [
      "1. Identify the source field to calculate length on",
      "2. Identify the target field to store the length",
      "3. Create a new column for the conditional value",
      "4. Update the length field with the calculated length",
      "5. Update the new column based on the length comparison"
    ]
  },
  {
    "id": "delete_values",
    "prompt": "Delete the values in the column {column}",
    "query": "UPDATE {target_table} SET {column} = NULL",
    "plan": [
      "1. Identify the column to clear values from",
      "2. Update the column setting all values to NULL"
    ]
  },
  {
    "id": "copy_from_segment",
    "prompt": "Bring {field} from {table} for the {reference_field} which you have got in Transformation {number}",
    "query": "INSERT INTO {target_table} ({target_field}) SELECT t2.{field} FROM {reference_table} t1 JOIN {table} t2 ON t1.{reference_field} = t2.{reference_field}",
    "plan": [
      "1. Identify the field to bring from the source table",
      "2. Identify the reference field to join on",
      "3. Identify the reference table from the previous transformation",
      "4. Prepare a JOIN query to get the data",
      "5. Execute the operation to update the target table"
    ]
  },
  {
    "id": "nullcheck_with_default",
    "prompt": "If {field} is null then try to bring from {table2} even if {table2} has null value, then hardcode as '{default_value}'",
    "query": "UPDATE {target_table} SET {field} = CASE WHEN {target_table}.{field} IS NULL THEN COALESCE((SELECT {field} FROM {table2} WHERE {key_field} = {target_table}.{key_field}), '{default_value}') ELSE {target_table}.{field} END",
    "plan": [
      "1. Identify the field to check for NULL",
      "2. Identify the fallback table to check",
      "3. Identify the default value to use if both are NULL",
      "4. Create a CASE expression with COALESCE to implement the logic",
      "5. Prepare the UPDATE statement"
    ]
  },
  {
    "id": "cross_table_validation",
    "prompt": "Bring {field1} from {table1} for {filter_condition} and check if same {field2} is available in {table2} with {validation_condition}",
    "query": "INSERT INTO {target_table} ({target_field}) SELECT t1.{field1} FROM {table1} t1 WHERE t1.{filter_field} = '{filter_value}' AND EXISTS (SELECT 1 FROM {table2} t2 WHERE t2.{field2} = t1.{field1} AND t2.{validation_field} = '{validation_value}')",
    "plan": [
      "1. Identify the source table and field to retrieve",
      "2. Identify the filter condition for the source table",
      "3. Identify the validation table and conditions",
      "4. Create a query with EXISTS clause for cross-table validation",
      "5. Insert only records that pass both conditions"
    ]
  },
  {
    "id": "field_update_from_source",
    "prompt": "For every {entity} in the target table, fetch the {source_field} from the {source_table} and update the {target_field}",
    "query": "UPDATE {target_table} SET {target_field} = (SELECT {source_field} FROM {source_table} WHERE {key_field} = {target_table}.{key_field})",
    "plan": [
      "1. Identify the source table and field to fetch",
      "2. Identify the target field to update",
      "3. Identify the key field for joining",
      "4. Create UPDATE statement with subquery",
      "5. Execute the update operation"
    ]
  },
  {
    "id": "set_default_values",
    "prompt": "Set default value '{default_value}' for {field}",
    "query": "UPDATE {target_table} SET {field} = '{default_value}'",
    "plan": [
      "1. Identify the field to set default value for",
      "2. Identify the default value to assign",
      "3. Execute UPDATE statement to set the default value"
    ]
  },
  {
    "id": "conditional_default_assignment",
    "prompt": "If {condition_field} = '{condition_value}' then default '{value1}', else default '{value2}'",
    "query": "UPDATE {target_table} SET {target_field} = CASE WHEN {condition_field} = '{condition_value}' THEN '{value1}' ELSE '{value2}' END",
    "plan": [
      "1. Identify the condition field and value to check",
      "2. Identify the conditional default values",
      "3. Create CASE expression for conditional assignment",
      "4. Update the target field with conditional defaults"
    ]
  },
    {
    "id": "extract_day_from_yyyymmdd_field",
    "prompt": "Add a new column named {new_column} to the target table. For each record, extract only the day part from the {source_field} field (for example, from \"20231208\" extract \"08\") and store it in the {new_column} column.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = substr(CAST({source_field} AS TEXT), 7, 2)",
    "plan": [
      "1. Add a new column to the target table for storing the extracted day",
      "2. Cast the source field to TEXT to ensure string operations work correctly",
      "3. Use substr() to extract characters 7-8 (day part) from YYYYMMDD format",
      "4. Update all records with the extracted day values"
    ]
  },
  {
    "id": "extract_year_from_yyyymmdd_field", 
    "prompt": "Add a new column named {new_column} to the target table. For each record, extract only the year part from the {source_field} field (for example, from \"20231208\" extract \"2023\") and store it in the {new_column} column.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = substr(CAST({source_field} AS TEXT), 1, 4)",
    "plan": [
      "1. Add a new column to the target table for storing the extracted year",
      "2. Cast the source field to TEXT to ensure string operations work correctly", 
      "3. Use substr() to extract characters 1-4 (year part) from YYYYMMDD format",
      "4. Update all records with the extracted year values"
    ]
  },
  {
    "id": "extract_month_from_yyyymmdd_field",
    "prompt": "Add a new column named {new_column} to the target table. For each record, extract only the month part from the {source_field} field (for example, from \"20231208\" extract \"12\") and store it in the {new_column} column.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = substr(CAST({source_field} AS TEXT), 5, 2)",
    "plan": [
      "1. Add a new column to the target table for storing the extracted month",
      "2. Cast the source field to TEXT to ensure string operations work correctly",
      "3. Use substr() to extract characters 5-6 (month part) from YYYYMMDD format", 
      "4. Update all records with the extracted month values"
    ]
  },
  {
    "id": "extract_quarter_from_yyyymmdd_field",
    "prompt": "Add a new column named {new_column} to the target table. For each record, determine the quarter (Q1, Q2, Q3, or Q4) of the date in the {source_field} field and store this value in the {new_column} column.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = CASE WHEN substr({source_field}, 5, 2) AS INTEGER) BETWEEN 1 AND 3 THEN 'Q1' WHEN substr({source_field}, 5, 2) AS INTEGER) BETWEEN 4 AND 6 THEN 'Q2' WHEN substr({source_field} 5, 2) AS INTEGER) BETWEEN 7 AND 9 THEN 'Q3' ELSE 'Q4' END",
    "plan": [
      "1. Add a new column to the target table for storing the quarter",
      "2. Extract the month part from YYYYMMDD format using substr()",
      "3. Convert the month to integer for comparison",
      "4. Use CASE statement to determine quarter: Q1 (Jan-Mar), Q2 (Apr-Jun), Q3 (Jul-Sep), Q4 (Oct-Dec)",
      "5. Update all records with the calculated quarter values"
    ]
  },
  {
    "id": "calculate_last_date_previous_month",
    "prompt": "Add a new column named {new_column} to the target table. For each record, calculate the last date of the previous month based on the value in the {source_field} field, and store this date in the {new_column} column.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = substr(CAST({source_field} AS TEXT), 1, 4) || '-' || substr(CAST({source_field} AS TEXT), 5, 2) || '-01', '-1 day')",
    "plan": [
      "1. Add a new column to the target table for storing the last date of previous month",
      "2. Convert YYYYMMDD to YYYY-MM-01 format (first day of the month)",
      "3. Use SQLite date function with '-1 day' to get the last day of previous month",
      "4. Update all records with the calculated previous month's last date"
    ]
  },
  {
    "id": "add_system_date_column",
    "prompt": "Add a new column to the target table named {new_column}. Populate this column with the system date (i.e., the current date) for all material records in the target table.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = date('now')",
    "plan": [
      "1. Add a new column to the target table for storing the system date",
      "2. Use SQLite's date('now') function to get the current date",
      "3. Update all records with the current system date"
    ]
  },
  {
    "id": "extract_weekday_number_from_yyyymmdd",
    "prompt": "Add a new column named {new_column} to the target table. For each record, extract the day of the week as a number (0=Sunday, 1=Monday, etc.) from the {source_field} field and store it in the {new_column} column.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = strftime('%w', to_date({source_fields}))",
    "plan": [
      "1. Add a new column to the target table for storing the weekday number",
      "2. Convert YYYYMMDD format to SQLite date format (YYYY-MM-DD)", 
      "3. Use strftime('%w', date) to get weekday number (0=Sunday, 1=Monday, etc.)",
      "4. Update all records with the calculated weekday numbers"
    ]
  },
  {
    "id": "format_date_yyyymmdd_to_readable",
    "prompt": "Add a new column named {new_column} to the target table. For each record, convert the date in {source_field} field from YYYYMMDD format to a readable format like 'December 08, 2023' and store it in the {new_column} column.",
    "query": "ALTER TABLE {target_table} ADD COLUMN {new_column} TEXT; UPDATE {target_table} SET {new_column} = strftime('%B %d, %Y', to_date({source_fields}))",
    "plan": [
      "1. Add a new column to the target table for storing the formatted date",
      "2. Convert YYYYMMDD format to SQLite date format (YYYY-MM-DD)",
      "3. Use strftime('%B %d, %Y', date) to format as 'Month DD, YYYY'",
      "4. Update all records with the human-readable formatted dates"
    ]
  },
  {
    "id": "filter_and_keep_rows",
    "prompt": "Filter and update target table where {filter_field} = {filter_value}",
    "query": "DELETE FROM {target_table} WHERE {filter_field} != '{filter_value}'",
    "plan": [
        "1. Identify the target table to filter",
        "2. Identify the filter field and value condition", 
        "3. Use DELETE statement to remove all rows that don't match the condition",
        "4. This will keep only rows where the condition is true"
    ]
  }
]